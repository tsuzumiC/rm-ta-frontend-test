{"version":3,"sources":["components/resourcesTypes/resourcesTypes.ts","components/getData/getData.ts","components/makeCards/makeCards.tsx","components/input/input.tsx","components/displayData/displayData.tsx","App.tsx","index.tsx"],"names":["EResourceTypes","EHasResourceNames","CNamedResource","name","url","id","resource","this","CPerson","people","firstName","lastName","birth_year","eye_color","films","filmsList","gender","hair_color","height","homeworld","homeworldObj","mass","skin_color","species","speciesList","starships","starshipsList","vehicles","vehiclesList","cardOpen","hasResourceNames","includes","slice","indexOf","false","CPlanet","planet","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","residents","residentsList","CFilm","film","title","episode_id","opening_crawl","director","producer","release_date","characters","charactersList","planets","planetsList","CSpecie","specie","classification","designation","average_height","average_lifespan","hair_colors","skin_colors","eye_colors","homeworldList","language","peopleList","CStarship","starship","model","manufacturer","cost_in_credits","length","max_atmosphering_speed","crew","passengers","cargo_capacity","consumables","hyperdrive_rating","MGLT","starship_class","pilots","pilotsList","CVehicle","vehicle","vehicle_class","keyRegx","idRegx","getResourceId","resourceLink","parseInt","match","baseUrl","getData","a","axios","get","data","console","log","tempResult","results","nextPage","next","i","count","newData","MakePeopleCard","props","true","map","loading","details","onClick","event","updateIsOpen","People","className","Button","type","disabled","displayName","Field","htmlFor","lable","value","onChange","DisplayData","pickedResourceType","undefined","cardList","searchFor","person","searchValue","onSearchChange","searchClicked","resetClicked","resourceToShow","App","defaultValues","getList","searchInput","useState","values","setValues","useEffect","then","classList","forEach","push","handleGetList","getResourceList","makeGetNamedResourcesList","indexOfResource","getNamedResourceList","needNames","homeworldId","find","Planets","done","target","tempPlanet","filmId","Films","tempFilm","speciesId","Species","tempSpecies","starshipsId","Starships","tempStarship","vehiclesId","Vehicles","tempVehicle","tempPeopleList","tempPlanetsList","tempFilmsList","tempSpeciesList","tempStarshipsList","tempVehiclesList","tempGetList","getTempList","updateValues","shift","getResourcesFromGetList","findIndex","classPerson","indexOfTarget","namedResource","classPlanet","classFilm","classSpecie","classStarship","classVehicle","tempList","result","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b49c7f52.chunk.js","sourcesContent":["export enum EResourceTypes {\r\n  People = \"people\",\r\n  Films = \"films\",\r\n  Planets = \"planets\",\r\n  Species = \"species\",\r\n  Starships = \"starships\",\r\n  Vehicles = \"vehicles\",\r\n}\r\nexport enum EHasResourceNames {\r\n  false = \"false\",\r\n  true = \"true\",\r\n  loading = \"loading\",\r\n}\r\nexport interface IValues {\r\n  people: CPerson[];\r\n  planets: CPlanet[];\r\n  films: CFilm[];\r\n  species: CSpecie[];\r\n  starships: CStarship[];\r\n  vehicles: CVehicle[];\r\n  resourceToShow: EResourceTypes;\r\n}\r\nexport interface ISwapiGetAll<T> {\r\n  count: number;\r\n  next: string | null;\r\n  previous: string | null;\r\n  results: T[];\r\n}\r\n\r\nexport interface IGetList {\r\n  resource: EResourceTypes;\r\n  id: number;\r\n  done: boolean;\r\n  target?: {\r\n    resource: EResourceTypes;\r\n    id: number;\r\n  };\r\n}\r\nexport interface ICards {\r\n  cardOpen: boolean;\r\n  url: string;\r\n  id: number;\r\n  hasResourceNames: EHasResourceNames;\r\n}\r\nexport interface INamedResource {\r\n  name: string;\r\n  url: string;\r\n  id: number;\r\n  resource: EResourceTypes;\r\n}\r\nexport class CNamedResource {\r\n  name: string;\r\n  url: string;\r\n  id: number;\r\n  resource: EResourceTypes;\r\n  constructor(name: string, url: string, id: number, resource: EResourceTypes) {\r\n    this.name = name;\r\n    this.url = url;\r\n    this.id = id;\r\n    this.resource = resource;\r\n  }\r\n}\r\n\r\nexport interface IPerson extends ICards {\r\n  name: string;\r\n  birth_year: string;\r\n  eye_color: string;\r\n  films: string[];\r\n  gender: string;\r\n  hair_color: string;\r\n  height: string;\r\n  homeworld: string;\r\n  mass: string;\r\n  skin_color: string;\r\n  species: string[];\r\n  starships: string[];\r\n  vehicles: string[];\r\n}\r\nexport class CPerson implements IPerson {\r\n  name: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  url: string;\r\n  id: number;\r\n  birth_year: string;\r\n  eye_color: string;\r\n  films: string[];\r\n  filmsList: CNamedResource[];\r\n  gender: string;\r\n  hair_color: string;\r\n  height: string;\r\n  homeworld: string;\r\n  homeworldObj: CNamedResource;\r\n  mass: string;\r\n  skin_color: string;\r\n  species: string[];\r\n  speciesList: CNamedResource[];\r\n  starships: string[];\r\n  starshipsList: CNamedResource[];\r\n  vehicles: string[];\r\n  vehiclesList: CNamedResource[];\r\n  cardOpen: boolean;\r\n  hasResourceNames: EHasResourceNames;\r\n  constructor(people: IPerson) {\r\n    this.name = people.name;\r\n    this.firstName = people.name.includes(\" \")\r\n      ? people.name.slice(0, people.name.indexOf(\" \"))\r\n      : people.name;\r\n    this.lastName = people.name.includes(\" \")\r\n      ? people.name.slice(people.name.indexOf(\" \"))\r\n      : \"\";\r\n    this.id = people.id;\r\n    this.url = people.url;\r\n    this.birth_year = people.birth_year;\r\n    this.eye_color = people.eye_color;\r\n    this.films = people.films;\r\n    this.filmsList = [] as CNamedResource[];\r\n    this.gender = people.gender;\r\n    this.hair_color = people.hair_color;\r\n    this.height = people.height;\r\n    this.homeworld = people.homeworld;\r\n    this.homeworldObj = {} as CNamedResource;\r\n    this.mass = people.mass;\r\n    this.skin_color = people.skin_color;\r\n    this.species = people.species;\r\n    this.speciesList = [] as CNamedResource[];\r\n    this.starships = people.starships;\r\n    this.starshipsList = [] as CNamedResource[];\r\n    this.vehicles = people.vehicles;\r\n    this.vehiclesList = [] as CNamedResource[];\r\n    this.cardOpen = false;\r\n    this.hasResourceNames = EHasResourceNames.false;\r\n  }\r\n}\r\n\r\nexport interface IPlanets extends ICards {\r\n  name: string;\r\n  rotation_period: string;\r\n  orbital_period: string;\r\n  diameter: string;\r\n  climate: string;\r\n  gravity: string;\r\n  terrain: string;\r\n  surface_water: string;\r\n  population: string;\r\n  residents: string[];\r\n  films: string[];\r\n}\r\nexport class CPlanet implements IPlanets {\r\n  name: string;\r\n  id: number;\r\n  url: string;\r\n  rotation_period: string;\r\n  orbital_period: string;\r\n  diameter: string;\r\n  climate: string;\r\n  gravity: string;\r\n  terrain: string;\r\n  surface_water: string;\r\n  population: string;\r\n  residents: string[];\r\n  residentsList: CNamedResource[];\r\n  films: string[];\r\n  filmsList: CNamedResource[];\r\n  cardOpen: boolean;\r\n  hasResourceNames: EHasResourceNames;\r\n  constructor(planet: IPlanets) {\r\n    this.name = planet.name;\r\n    this.id = planet.id;\r\n    this.url = planet.url;\r\n    this.rotation_period = planet.rotation_period;\r\n    this.orbital_period = planet.orbital_period;\r\n    this.diameter = planet.diameter;\r\n    this.climate = planet.climate;\r\n    this.gravity = planet.gravity;\r\n    this.terrain = planet.terrain;\r\n    this.surface_water = planet.surface_water;\r\n    this.population = planet.population;\r\n    this.residents = planet.residents;\r\n    this.residentsList = [] as CNamedResource[];\r\n    this.films = planet.films;\r\n    this.filmsList = [] as CNamedResource[];\r\n    this.cardOpen = false;\r\n    this.hasResourceNames = EHasResourceNames.false;\r\n  }\r\n}\r\n\r\nexport interface IFilms extends ICards {\r\n  title: string;\r\n  episode_id: number;\r\n  opening_crawl: string;\r\n  director: string;\r\n  producer: string;\r\n  release_date: string;\r\n  characters: string[];\r\n  planets: string[];\r\n  species: string[];\r\n  starships: string[];\r\n  vehicles: string[];\r\n}\r\nexport class CFilm implements IFilms {\r\n  id: number;\r\n  url: string;\r\n  title: string;\r\n  episode_id: number;\r\n  opening_crawl: string;\r\n  director: string;\r\n  producer: string;\r\n  release_date: string;\r\n  characters: string[];\r\n  charactersList: CNamedResource[];\r\n  planets: string[];\r\n  planetsList: CNamedResource[];\r\n  species: string[];\r\n  speciesList: CNamedResource[];\r\n  starships: string[];\r\n  starshipsList: CNamedResource[];\r\n  vehicles: string[];\r\n  vehiclesList: CNamedResource[];\r\n  cardOpen: boolean;\r\n  hasResourceNames: EHasResourceNames;\r\n  constructor(film: IFilms) {\r\n    this.id = film.id;\r\n    this.url = film.url;\r\n    this.title = film.title;\r\n    this.episode_id = film.episode_id;\r\n    this.opening_crawl = film.opening_crawl;\r\n    this.director = film.director;\r\n    this.producer = film.producer;\r\n    this.release_date = film.release_date;\r\n    this.characters = film.characters;\r\n    this.charactersList = [] as CNamedResource[];\r\n    this.planets = film.planets;\r\n    this.planetsList = [] as CNamedResource[];\r\n    this.species = film.species;\r\n    this.speciesList = [] as CNamedResource[];\r\n    this.starships = film.starships;\r\n    this.starshipsList = [] as CNamedResource[];\r\n    this.vehicles = film.vehicles;\r\n    this.vehiclesList = [] as CNamedResource[];\r\n    this.cardOpen = false;\r\n    this.hasResourceNames = EHasResourceNames.false;\r\n  }\r\n}\r\n\r\nexport interface ISpecies extends ICards {\r\n  name: string;\r\n  classification: string;\r\n  designation: string;\r\n  average_height: string;\r\n  average_lifespan: string;\r\n  hair_colors: string;\r\n  skin_colors: string;\r\n  eye_colors: string;\r\n  homeworld: string;\r\n  language: string;\r\n  people: string[];\r\n  films: string[];\r\n}\r\nexport class CSpecie implements ISpecies {\r\n  name: string;\r\n  id: number;\r\n  url: string;\r\n  classification: string;\r\n  designation: string;\r\n  average_height: string;\r\n  average_lifespan: string;\r\n  hair_colors: string;\r\n  skin_colors: string;\r\n  eye_colors: string;\r\n  homeworld: string;\r\n  homeworldList: CNamedResource;\r\n  language: string;\r\n  people: string[];\r\n  peopleList: CNamedResource[];\r\n  films: string[];\r\n  filmsList: CNamedResource[];\r\n  cardOpen: boolean;\r\n  hasResourceNames: EHasResourceNames;\r\n  constructor(specie: ISpecies) {\r\n    this.name = specie.name;\r\n    this.id = specie.id;\r\n    this.url = specie.url;\r\n    this.classification = specie.classification;\r\n    this.designation = specie.designation;\r\n    this.average_height = specie.average_height;\r\n    this.average_lifespan = specie.average_lifespan;\r\n    this.hair_colors = specie.hair_colors;\r\n    this.skin_colors = specie.skin_colors;\r\n    this.eye_colors = specie.eye_colors;\r\n    this.homeworld = specie.homeworld;\r\n    this.homeworldList = {} as CNamedResource;\r\n    this.language = specie.language;\r\n    this.people = specie.people;\r\n    this.peopleList = [] as CNamedResource[];\r\n    this.films = specie.films;\r\n    this.filmsList = [] as CNamedResource[];\r\n    this.cardOpen = false;\r\n    this.hasResourceNames = EHasResourceNames.false;\r\n  }\r\n}\r\n\r\nexport interface IStarships extends ICards {\r\n  name: string;\r\n  model: string;\r\n  manufacturer: string;\r\n  cost_in_credits: string;\r\n  length: string;\r\n  max_atmosphering_speed: string;\r\n  crew: string;\r\n  passengers: string;\r\n  cargo_capacity: string;\r\n  consumables: string;\r\n  hyperdrive_rating: string;\r\n  MGLT: string;\r\n  starship_class: string;\r\n  pilots: string[];\r\n  films: string[];\r\n}\r\nexport class CStarship implements IStarships {\r\n  name: string;\r\n  id: number;\r\n  url: string;\r\n  model: string;\r\n  manufacturer: string;\r\n  cost_in_credits: string;\r\n  length: string;\r\n  max_atmosphering_speed: string;\r\n  crew: string;\r\n  passengers: string;\r\n  cargo_capacity: string;\r\n  consumables: string;\r\n  hyperdrive_rating: string;\r\n  MGLT: string;\r\n  starship_class: string;\r\n  pilots: string[];\r\n  pilotsList: CNamedResource[];\r\n  films: string[];\r\n  filmsList: CNamedResource[];\r\n  cardOpen: boolean;\r\n  hasResourceNames: EHasResourceNames;\r\n  constructor(starship: IStarships) {\r\n    this.name = starship.name;\r\n    this.id = starship.id;\r\n    this.url = starship.url;\r\n    this.model = starship.model;\r\n    this.manufacturer = starship.manufacturer;\r\n    this.cost_in_credits = starship.cost_in_credits;\r\n    this.length = starship.length;\r\n    this.max_atmosphering_speed = starship.max_atmosphering_speed;\r\n    this.crew = starship.crew;\r\n    this.passengers = starship.passengers;\r\n    this.cargo_capacity = starship.cargo_capacity;\r\n    this.consumables = starship.consumables;\r\n    this.hyperdrive_rating = starship.hyperdrive_rating;\r\n    this.MGLT = starship.MGLT;\r\n    this.starship_class = starship.starship_class;\r\n    this.pilots = starship.pilots;\r\n    this.pilotsList = [] as CNamedResource[];\r\n    this.films = starship.films;\r\n    this.filmsList = [] as CNamedResource[];\r\n    this.cardOpen = false;\r\n    this.hasResourceNames = EHasResourceNames.false;\r\n  }\r\n}\r\n\r\nexport interface IVehicles extends ICards {\r\n  name: string;\r\n  model: string;\r\n  manufacturer: string;\r\n  cost_in_credits: string;\r\n  length: string;\r\n  max_atmosphering_speed: string;\r\n  crew: string;\r\n  passengers: string;\r\n  cargo_capacity: string;\r\n  consumables: string;\r\n  vehicle_class: string;\r\n  pilots: string[];\r\n  films: string[];\r\n}\r\nexport class CVehicle implements IVehicles {\r\n  name: string;\r\n  id: number;\r\n  url: string;\r\n  model: string;\r\n  manufacturer: string;\r\n  cost_in_credits: string;\r\n  length: string;\r\n  max_atmosphering_speed: string;\r\n  crew: string;\r\n  passengers: string;\r\n  cargo_capacity: string;\r\n  consumables: string;\r\n  vehicle_class: string;\r\n  pilots: string[];\r\n  pilotsList: CNamedResource[];\r\n  films: string[];\r\n  filmsList: CNamedResource[];\r\n  cardOpen: boolean;\r\n  hasResourceNames: EHasResourceNames;\r\n  constructor(vehicle: IVehicles) {\r\n    this.name = vehicle.name;\r\n    this.id = vehicle.id;\r\n    this.url = vehicle.url;\r\n    this.model = vehicle.model;\r\n    this.manufacturer = vehicle.manufacturer;\r\n    this.cost_in_credits = vehicle.cost_in_credits;\r\n    this.length = vehicle.length;\r\n    this.max_atmosphering_speed = vehicle.max_atmosphering_speed;\r\n    this.crew = vehicle.crew;\r\n    this.passengers = vehicle.passengers;\r\n    this.cargo_capacity = vehicle.cargo_capacity;\r\n    this.consumables = vehicle.consumables;\r\n    this.vehicle_class = vehicle.vehicle_class;\r\n    this.pilots = vehicle.pilots;\r\n    this.pilotsList = [] as CNamedResource[];\r\n    this.films = vehicle.films;\r\n    this.filmsList = [] as CNamedResource[];\r\n    this.cardOpen = false;\r\n    this.hasResourceNames = EHasResourceNames.false;\r\n  }\r\n}\r\n","import axios from \"axios\";\r\nimport {\r\n  EResourceTypes,\r\n  ICards,\r\n  ISwapiGetAll,\r\n  EHasResourceNames,\r\n} from \"../resourcesTypes/resourcesTypes\";\r\n\r\nexport const keyRegx = /\\/[a-z]+\\/[0-9]+\\//g,\r\n  idRegx = /[0-9]+/g;\r\nexport const getResourceId = (resourceLink: string): number => {\r\n  return parseInt(resourceLink.match(keyRegx)![0].match(idRegx)![0]);\r\n};\r\nconst baseUrl = \"https://swapi.dev/api/\";\r\n\r\nexport async function getData<T extends ICards>(\r\n  resource: EResourceTypes\r\n): Promise<T[]>;\r\nexport async function getData<T extends ICards>(\r\n  resource: EResourceTypes,\r\n  id: number\r\n): Promise<T>;\r\nexport async function getData<T extends ICards>(\r\n  resource: EResourceTypes,\r\n  id?: number\r\n): Promise<any> {\r\n  if (id) {\r\n    try {\r\n      let { data } = await axios.get<T>(`${baseUrl}${resource}/${id}/`);\r\n      data.id = getResourceId(data.url);\r\n      data.hasResourceNames = EHasResourceNames.false;\r\n      return data;\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  } else {\r\n    try {\r\n      const { data } = await axios.get<ISwapiGetAll<T>>(\r\n        `${baseUrl}${resource}/`\r\n      );\r\n\r\n      let tempResult = data.results,\r\n        nextPage = data.next;\r\n\r\n      for (\r\n        let i = tempResult.length;\r\n        i < data.count - 1;\r\n        i = tempResult.length\r\n      ) {\r\n        if (nextPage) {\r\n          const { data: newData } = await axios.get<ISwapiGetAll<T>>(nextPage);\r\n          tempResult = [...tempResult, ...newData.results];\r\n          nextPage = newData.next;\r\n        }\r\n      }\r\n      for (let i = 0; i < tempResult.length; i++) {\r\n        tempResult[i].id = getResourceId(tempResult[i].url);\r\n        tempResult[i].hasResourceNames = EHasResourceNames.false;\r\n      }\r\n\r\n      return tempResult;\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { CPerson, EResourceTypes } from \"../resourcesTypes/resourcesTypes\";\r\n\r\nimport \"./makeCards.css\";\r\n\r\ninterface IMakeCard<T> {\r\n  resource: T;\r\n  updateIsOpen: (\r\n    event: React.MouseEvent,\r\n    resource: EResourceTypes,\r\n    id: number\r\n  ) => void;\r\n}\r\nexport const MakePeopleCard = (props: IMakeCard<CPerson>) => {\r\n  const hasResourceNames = {\r\n    false: () => {\r\n      return <div>Getting details</div>;\r\n    },\r\n    true: () => {\r\n      return (\r\n        <div>\r\n          <div>{`Homeworld: ${props.resource.homeworldObj.name}`}</div>\r\n          <div>{`Species: ${\r\n            props.resource.speciesList.length > 0\r\n              ? props.resource.speciesList[0].name\r\n              : \"Human\"\r\n          }`}</div>\r\n          <div>\r\n            <p>Films: </p>\r\n            <ul>\r\n              {props.resource.filmsList.map((film) => {\r\n                return <li>{film.name}</li>;\r\n              })}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      );\r\n    },\r\n    loading: () => {\r\n      return <div>Loading details</div>;\r\n    },\r\n  };\r\n\r\n  const details =\r\n    props.resource.cardOpen &&\r\n    hasResourceNames[props.resource.hasResourceNames]();\r\n\r\n  return (\r\n    <li\r\n      onClick={(event) => {\r\n        props.updateIsOpen(event, EResourceTypes.People, props.resource.id);\r\n      }}\r\n    >\r\n      <div className=\"card\">\r\n        <div className=\"name\">{props.resource.name}</div>\r\n        {details}\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\n/* export const MakePlanetCard = (props: IMakeCard<IPlanets>) => {\r\n    return (\r\n        <li key={planet.url}>\r\n            <p>{planet.name}</p>\r\n        </li>\r\n    );\r\n}; */\r\n","import React from \"react\";\r\n\r\ninterface IButton {\r\n  type: \"button\" | \"submit\" | \"reset\";\r\n  name?: string;\r\n  id: string;\r\n  onClick: (event: React.MouseEvent<HTMLButtonElement>) => void;\r\n  displayName: string;\r\n  disabled?: boolean;\r\n}\r\nexport const Button = (props: IButton) => {\r\n  return (\r\n    <button\r\n      type={props.type}\r\n      name={props.name ? props.name : props.id}\r\n      id={props.id}\r\n      onClick={props.onClick}\r\n      disabled={props.disabled}\r\n    >\r\n      {props.displayName}\r\n    </button>\r\n  );\r\n};\r\n\r\ninterface IField {\r\n  type: \"text\";\r\n  name?: string;\r\n  id: string;\r\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  lable: string;\r\n  value: string;\r\n}\r\n\r\nexport const Field = (props: IField) => {\r\n  return (\r\n    <div>\r\n      <label htmlFor={props.id}>{props.lable}</label>\r\n      <input\r\n        id={props.id}\r\n        name={props.name ? props.name : props.id}\r\n        value={props.value}\r\n        onChange={props.onChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { EResourceTypes } from \"../resourcesTypes/resourcesTypes\";\r\nimport { MakePeopleCard } from \"../makeCards/makeCards\";\r\nimport { IValues } from \"../resourcesTypes/resourcesTypes\";\r\nimport { keyRegx } from \"../getData/getData\";\r\nimport { Button, Field } from \"../input/input\";\r\n\r\nconst DisplayData = (props: {\r\n  data: IValues;\r\n  updateIsOpen: (\r\n    event: React.MouseEvent,\r\n    resource: EResourceTypes,\r\n    id: number\r\n  ) => void;\r\n  searchValue: string;\r\n  onSearchChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  searchFor: string;\r\n  searchClicked: () => void;\r\n  resetClicked: () => void;\r\n}) => {\r\n  const pickedResourceType = {\r\n    undefined: () => {\r\n      return <p>Loading list of Star Wars characters from SWapi</p>;\r\n    },\r\n    people: () => {\r\n      let cardList;\r\n      if (props.searchFor.length > 0) {\r\n        cardList = props.data.people.map((person) => {\r\n          if (person.name.includes(props.searchFor)) {\r\n            return (\r\n              <MakePeopleCard\r\n                key={person.url.match(keyRegx)![0]}\r\n                resource={person}\r\n                updateIsOpen={props.updateIsOpen}\r\n              />\r\n            );\r\n          }\r\n        });\r\n      } else {\r\n        cardList = props.data.people.map((person) => {\r\n          return (\r\n            <MakePeopleCard\r\n              key={person.url.match(keyRegx)![0]}\r\n              resource={person}\r\n              updateIsOpen={props.updateIsOpen}\r\n            />\r\n          );\r\n        });\r\n      }\r\n\r\n      return (\r\n        <div>\r\n          <div>List of Starwars characters (from SWapi)</div>\r\n          <ul className=\"card-list\">{cardList}</ul>\r\n        </div>\r\n      );\r\n    },\r\n    planets: () => {\r\n      return <p>FPlanets not implemented yet.</p>;\r\n    },\r\n    films: () => {\r\n      return <p>Films not implemented yet.</p>;\r\n    },\r\n    species: () => {\r\n      return <p>Species not implemented yet.</p>;\r\n    },\r\n    starships: () => {\r\n      return <p>Starships not implemented yet.</p>;\r\n    },\r\n    vehicles: () => {\r\n      return <p>Vehicles not implemented yet.</p>;\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Field\r\n        type=\"text\"\r\n        id=\"searchField\"\r\n        lable=\"Sort by name\"\r\n        value={props.searchValue}\r\n        onChange={props.onSearchChange}\r\n      />\r\n      <Button\r\n        type=\"button\"\r\n        id=\"searchButton\"\r\n        onClick={props.searchClicked}\r\n        displayName=\"Search\"\r\n      />\r\n      <Button\r\n        type=\"button\"\r\n        id=\"resetButton\"\r\n        onClick={props.resetClicked}\r\n        displayName=\"Reset\"\r\n      />\r\n      {pickedResourceType[props.data.resourceToShow]()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisplayData;\r\n","import React, { useEffect, useState } from \"react\";\nimport { getData, getResourceId } from \"./components/getData/getData\";\nimport {\n  EResourceTypes,\n  ICards,\n  IFilms,\n  IGetList,\n  IPerson,\n  IPlanets,\n  ISpecies,\n  IStarships,\n  IVehicles,\n  EHasResourceNames,\n  CPerson,\n  CFilm,\n  CPlanet,\n  CSpecie,\n  CStarship,\n  CVehicle,\n  CNamedResource,\n} from \"./components/resourcesTypes/resourcesTypes\";\nimport DisplayData from \"./components/displayData/displayData\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  const defaultValues = {\n    people: [] as CPerson[],\n    planets: [] as CPlanet[],\n    films: [] as CFilm[],\n    species: [] as CSpecie[],\n    starships: [] as CStarship[],\n    vehicles: [] as CVehicle[],\n    resourceToShow: EResourceTypes.People,\n    getList: [] as IGetList[],\n    searchInput: \"\",\n    searchFor: \"\",\n  };\n  const [values, setValues] = useState(defaultValues),\n    {\n      people,\n      planets,\n      films,\n      species,\n      starships,\n      vehicles,\n      getList,\n      searchInput,\n      searchFor,\n    } = values;\n\n  useEffect(() => {\n    getData<IPerson>(EResourceTypes.People).then((data) => {\n      let classList = [] as CPerson[];\n      data.forEach((value) => {\n        classList.push(new CPerson(value));\n      });\n      setValues({\n        ...values,\n        people: classList,\n      });\n    });\n  }, []);\n\n  useEffect(() => {\n    if (getList.length > 0) {\n      handleGetList();\n    }\n  }, [getList]);\n\n  const onSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setValues({ ...values, searchInput: event.target.value });\n  };\n  const searchClicked = () => {\n    if (searchInput.length > 0) {\n      setValues({ ...values, searchFor: searchInput });\n    }\n  };\n  const resetClicked = () => {\n    setValues({ ...values, searchInput: \"\", searchFor: \"\" });\n  };\n\n  const getResourceList = {\n    people: () => {\n      return people;\n    },\n    planets: () => {\n      return planets;\n    },\n    films: () => {\n      return films;\n    },\n    species: () => {\n      return species;\n    },\n    starships: () => {\n      return starships;\n    },\n    vehicles: () => {\n      return vehicles;\n    },\n  };\n  /* This function opens and closes resource cards and checks if they need more resources to display properly */\n  const updateCardIsOpen = (\n    event: React.MouseEvent,\n    resource: EResourceTypes,\n    id: number\n  ) => {\n    const tempList = getResourceList[resource]();\n    const indexOfResource = tempList.findIndex((value: ICards) => {\n      return value.id === id;\n    });\n    tempList[indexOfResource].cardOpen = !tempList[indexOfResource].cardOpen;\n\n    if (\n      tempList[indexOfResource].hasResourceNames === EHasResourceNames.false\n    ) {\n      const result = makeGetNamedResourcesList(resource, indexOfResource, id);\n      tempList[indexOfResource].hasResourceNames = result.hasResourceNames;\n      if (result.getList === undefined) {\n        setValues({ ...values, [resource]: tempList });\n      } else {\n        setValues({ ...values, [resource]: tempList, getList: result.getList });\n      }\n    } else {\n      setValues({ ...values, [resource]: tempList });\n    }\n  };\n  /* This function looks at a resource and see if all resources it needs to display properly exists locally in the browser or needs to be called for through axios */\n  const makeGetNamedResourcesList = (\n    resource: EResourceTypes,\n    indexOfResource: number,\n    id: number\n  ): {\n    hasResourceNames: EHasResourceNames;\n    getList?: IGetList[];\n  } => {\n    let getNamedResourceList = [] as IGetList[];\n\n    const populateGetNamedResourceList = {\n      undefined: () => {},\n      people: () => {\n        let needNames = people[indexOfResource];\n        const homeworldId = getResourceId(needNames.homeworld);\n        // debugger;\n        if (\n          planets.find((value) => {\n            return value.id === homeworldId;\n          }) === undefined\n        ) {\n          getNamedResourceList.push({\n            resource: EResourceTypes.Planets,\n            id: homeworldId,\n            done: false,\n            target: {\n              resource: resource,\n              id: id,\n            },\n          });\n        } else {\n          const tempPlanet = planets.find((value) => {\n            return value.id === homeworldId;\n          })!;\n          needNames.homeworldObj = new CNamedResource(\n            tempPlanet.name,\n            tempPlanet.url,\n            homeworldId,\n            EResourceTypes.Planets\n          );\n        }\n\n        needNames.films.forEach((value) => {\n          const filmId = getResourceId(value);\n          if (\n            films.find((value) => {\n              return value.id === filmId;\n            }) === undefined\n          ) {\n            getNamedResourceList.push({\n              resource: EResourceTypes.Films,\n              id: filmId,\n              done: false,\n              target: {\n                resource: resource,\n                id: id,\n              },\n            });\n          } else {\n            const tempFilm = films.find((value) => {\n              return value.id === filmId;\n            })!;\n            needNames.filmsList.push(\n              new CNamedResource(\n                tempFilm.title,\n                tempFilm.url,\n                filmId,\n                EResourceTypes.Films\n              )\n            );\n          }\n        });\n        needNames.species.forEach((value) => {\n          const speciesId = getResourceId(value);\n          if (\n            species.find((value) => {\n              return value.id === speciesId;\n            }) === undefined\n          ) {\n            getNamedResourceList.push({\n              resource: EResourceTypes.Species,\n              id: speciesId,\n              done: false,\n              target: {\n                resource: resource,\n                id: id,\n              },\n            });\n          } else {\n            const tempSpecies = species.find((value) => {\n              return value.id === speciesId;\n            })!;\n            needNames.speciesList.push(\n              new CNamedResource(\n                tempSpecies.name,\n                tempSpecies.url,\n                speciesId,\n                EResourceTypes.Species\n              )\n            );\n          }\n        });\n        needNames.starships.forEach((value) => {\n          const starshipsId = getResourceId(value);\n          if (\n            starships.find((value) => {\n              return value.id === starshipsId;\n            }) === undefined\n          ) {\n            getNamedResourceList.push({\n              resource: EResourceTypes.Starships,\n              id: starshipsId,\n              done: false,\n              target: {\n                resource: resource,\n                id: id,\n              },\n            });\n          } else {\n            const tempStarship = starships.find((value) => {\n              return value.id === starshipsId;\n            })!;\n            needNames.starshipsList.push(\n              new CNamedResource(\n                tempStarship.name,\n                tempStarship.url,\n                starshipsId,\n                EResourceTypes.Starships\n              )\n            );\n          }\n        });\n        needNames.vehicles.forEach((value) => {\n          const vehiclesId = getResourceId(value);\n          if (\n            vehicles.find((value) => {\n              return value.id === vehiclesId;\n            }) === undefined\n          ) {\n            getNamedResourceList.push({\n              resource: EResourceTypes.Vehicles,\n              id: vehiclesId,\n              done: false,\n              target: {\n                resource: resource,\n                id: id,\n              },\n            });\n          } else {\n            const tempVehicle = vehicles.find((value) => {\n              return value.id === vehiclesId;\n            })!;\n            needNames.vehiclesList.push(\n              new CNamedResource(\n                tempVehicle.name,\n                tempVehicle.url,\n                vehiclesId,\n                EResourceTypes.Vehicles\n              )\n            );\n          }\n        });\n      },\n      planets: () => {},\n      films: () => {},\n      species: () => {},\n      starships: () => {},\n      vehicles: () => {},\n    };\n    populateGetNamedResourceList[resource]();\n\n    if (getNamedResourceList.length === 0) {\n      return { hasResourceNames: EHasResourceNames.true };\n    } else {\n      getNamedResourceList.push({\n        resource: resource,\n        id: id,\n        done: true,\n      });\n      return {\n        hasResourceNames: EHasResourceNames.loading,\n        getList: [...getNamedResourceList],\n      };\n    }\n  };\n\n  const handleGetList = () => {\n    let tempPeopleList = [...people],\n      tempPlanetsList = [...planets],\n      tempFilmsList = [...films],\n      tempSpeciesList = [...species],\n      tempStarshipsList = [...starships],\n      tempVehiclesList = [...vehicles],\n      tempGetList = [...getList];\n\n    const getTempList = {\n      people: () => {\n        return tempPeopleList;\n      },\n      planets: () => {\n        return tempPlanetsList;\n      },\n      films: () => {\n        return tempFilmsList;\n      },\n      species: () => {\n        return tempSpeciesList;\n      },\n      starships: () => {\n        return tempStarshipsList;\n      },\n      vehicles: () => {\n        return tempVehiclesList;\n      },\n    };\n\n    const updateValues = () => {\n      tempGetList.shift();\n      setValues({\n        ...values,\n        people: tempPeopleList,\n        planets: tempPlanetsList,\n        films: tempFilmsList,\n        species: tempSpeciesList,\n        starships: tempStarshipsList,\n        vehicles: tempVehiclesList,\n        getList: tempGetList,\n      });\n    };\n\n    const getResourcesFromGetList = {\n      undefined: () => {},\n      people: () => {\n        if (tempGetList[0].done) {\n          const indexOfResource = tempPeopleList.findIndex((value) => {\n            return value.id === tempGetList[0].id;\n          });\n          tempPeopleList[indexOfResource].hasResourceNames =\n            EHasResourceNames.true;\n          updateValues();\n        } else {\n          getData<IPerson>(EResourceTypes.People, tempGetList[0].id).then(\n            (data) => {\n              const classPerson = new CPerson(data);\n              const indexOfTarget = getTempList[\n                tempGetList[0].target!.resource\n              ]().findIndex((value: ICards) => {\n                return value.id === tempGetList[0].target?.id;\n              });\n              const namedResource = new CNamedResource(\n                classPerson.name,\n                classPerson.url,\n                getResourceId(classPerson.url),\n                EResourceTypes.People\n              );\n              if (tempGetList[0].target?.resource === EResourceTypes.Films) {\n                tempFilmsList[indexOfTarget].charactersList.push(namedResource);\n              } else if (\n                tempGetList[0].target?.resource ===\n                (EResourceTypes.Starships || EResourceTypes.Vehicles)\n              ) {\n                getTempList[tempGetList[0].target.resource]()[\n                  indexOfTarget\n                ].pilotsList.push(namedResource);\n              } else if (\n                tempGetList[0].target?.resource === EResourceTypes.Species\n              ) {\n                tempSpeciesList[indexOfTarget].peopleList.push(namedResource);\n              } else if (\n                tempGetList[0].target?.resource === EResourceTypes.Planets\n              ) {\n                tempPlanetsList[indexOfTarget].residentsList.push(\n                  namedResource\n                );\n              }\n              tempPeopleList.push(classPerson);\n              tempGetList.shift();\n              getResourcesFromGetList[tempGetList[0].resource]();\n            }\n          );\n        }\n      },\n      planets: () => {\n        if (tempGetList[0].done) {\n          const indexOfResource = tempPlanetsList.findIndex((value) => {\n            return value.id === tempGetList[0].id;\n          });\n          tempPlanetsList[indexOfResource].hasResourceNames =\n            EHasResourceNames.true;\n          updateValues();\n        } else {\n          getData<IPlanets>(EResourceTypes.Planets, tempGetList[0].id).then(\n            (data) => {\n              const classPlanet = new CPlanet(data);\n              const indexOfTarget = getTempList[\n                tempGetList[0].target!.resource\n              ]().findIndex((value: ICards) => {\n                return value.id === tempGetList[0].target?.id;\n              });\n              if (\n                tempGetList[0].target?.resource ===\n                (EResourceTypes.People || EResourceTypes.Species)\n              ) {\n                getTempList[tempGetList[0].target.resource]()[\n                  indexOfTarget\n                ].homeworldObj = new CNamedResource(\n                  classPlanet.name,\n                  classPlanet.url,\n                  getResourceId(classPlanet.url),\n                  EResourceTypes.Planets\n                );\n              } else if (\n                tempGetList[0].target?.resource === EResourceTypes.Films\n              ) {\n                tempFilmsList[indexOfTarget].planetsList.push(\n                  new CNamedResource(\n                    classPlanet.name,\n                    classPlanet.url,\n                    getResourceId(classPlanet.url),\n                    EResourceTypes.Planets\n                  )\n                );\n              }\n              tempPlanetsList.push(classPlanet);\n              tempGetList.shift();\n              getResourcesFromGetList[tempGetList[0].resource]();\n            }\n          );\n        }\n      },\n      films: () => {\n        if (tempGetList[0].done) {\n          const indexOfResource = tempFilmsList.findIndex((value) => {\n            return value.id === tempGetList[0].id;\n          });\n          tempFilmsList[indexOfResource].hasResourceNames =\n            EHasResourceNames.true;\n          updateValues();\n        } else {\n          getData<IFilms>(EResourceTypes.Films, tempGetList[0].id).then(\n            (data) => {\n              const classFilm = new CFilm(data);\n              const indexOfTarget = getTempList[\n                tempGetList[0].target!.resource\n              ]().findIndex((value: ICards) => {\n                return value.id === tempGetList[0].target?.id;\n              });\n              if (tempGetList[0].target?.resource !== EResourceTypes.Films) {\n                getTempList[tempGetList[0].target!.resource]()[\n                  indexOfTarget\n                ].filmsList.push(\n                  new CNamedResource(\n                    classFilm.title,\n                    classFilm.url,\n                    getResourceId(classFilm.url),\n                    EResourceTypes.Films\n                  )\n                );\n              }\n              tempFilmsList.push(classFilm);\n              tempGetList.shift();\n              getResourcesFromGetList[tempGetList[0].resource]();\n            }\n          );\n        }\n      },\n      species: () => {\n        if (tempGetList[0].done) {\n          const indexOfResource = tempSpeciesList.findIndex((value) => {\n            return value.id === tempGetList[0].id;\n          });\n          tempSpeciesList[indexOfResource].hasResourceNames =\n            EHasResourceNames.true;\n          updateValues();\n        } else {\n          getData<ISpecies>(EResourceTypes.Species, tempGetList[0].id).then(\n            (data) => {\n              const classSpecie = new CSpecie(data);\n              const indexOfTarget = getTempList[\n                tempGetList[0].target!.resource\n              ]().findIndex((value: ICards) => {\n                return value.id === tempGetList[0].target?.id;\n              });\n              if (\n                tempGetList[0].target?.resource ===\n                (EResourceTypes.People || EResourceTypes.Films)\n              ) {\n                getTempList[tempGetList[0].target.resource]()[\n                  indexOfTarget\n                ].speciesList.push(\n                  new CNamedResource(\n                    classSpecie.name,\n                    classSpecie.url,\n                    getResourceId(classSpecie.url),\n                    EResourceTypes.Species\n                  )\n                );\n              }\n              tempSpeciesList.push(classSpecie);\n              tempGetList.shift();\n              getResourcesFromGetList[tempGetList[0].resource]();\n            }\n          );\n        }\n      },\n      starships: () => {\n        if (tempGetList[0].done) {\n          const indexOfResource = tempStarshipsList.findIndex((value) => {\n            return value.id === tempGetList[0].id;\n          });\n          tempStarshipsList[indexOfResource].hasResourceNames =\n            EHasResourceNames.true;\n          updateValues();\n        } else {\n          getData<IStarships>(EResourceTypes.Starships, tempGetList[0].id).then(\n            (data) => {\n              const classStarship = new CStarship(data);\n              const indexOfTarget = getTempList[\n                tempGetList[0].target!.resource\n              ]().findIndex((value: ICards) => {\n                return value.id === tempGetList[0].target?.id;\n              });\n              if (\n                tempGetList[0].target?.resource ===\n                (EResourceTypes.People || EResourceTypes.Films)\n              ) {\n                getTempList[tempGetList[0].target.resource]()[\n                  indexOfTarget\n                ].starshipsList.push(\n                  new CNamedResource(\n                    classStarship.name,\n                    classStarship.url,\n                    getResourceId(classStarship.url),\n                    EResourceTypes.Starships\n                  )\n                );\n              }\n              tempStarshipsList.push(classStarship);\n              tempGetList.shift();\n              getResourcesFromGetList[tempGetList[0].resource]();\n            }\n          );\n        }\n      },\n      vehicles: () => {\n        if (tempGetList[0].done) {\n          const indexOfResource = tempVehiclesList.findIndex((value) => {\n            return value.id === tempGetList[0].id;\n          });\n          tempVehiclesList[indexOfResource].hasResourceNames =\n            EHasResourceNames.true;\n          updateValues();\n        } else {\n          getData<IVehicles>(EResourceTypes.Vehicles, tempGetList[0].id).then(\n            (data) => {\n              const classVehicle = new CVehicle(data);\n              const indexOfTarget = getTempList[\n                tempGetList[0].target!.resource\n              ]().findIndex((value: ICards) => {\n                return value.id === tempGetList[0].target?.id;\n              });\n              if (\n                tempGetList[0].target?.resource ===\n                (EResourceTypes.People || EResourceTypes.Films)\n              ) {\n                getTempList[tempGetList[0].target.resource]()[\n                  indexOfTarget\n                ].vehiclesList.push(\n                  new CNamedResource(\n                    classVehicle.name,\n                    classVehicle.url,\n                    getResourceId(classVehicle.url),\n                    EResourceTypes.Vehicles\n                  )\n                );\n              }\n              tempVehiclesList.push(classVehicle);\n              tempGetList.shift();\n              getResourcesFromGetList[tempGetList[0].resource]();\n            }\n          );\n        }\n      },\n    };\n    getResourcesFromGetList[tempGetList[0].resource]();\n  };\n\n  return (\n    <div>\n      <DisplayData\n        data={values}\n        updateIsOpen={updateCardIsOpen}\n        searchValue={searchInput}\n        onSearchChange={onSearchChange}\n        searchFor={searchFor}\n        searchClicked={searchClicked}\n        resetClicked={resetClicked}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}